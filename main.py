import os
import telebot
import random
from telebot import types

BOT_TOKEN = os.environ.get("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

# ุฑุฏูุฏ ูุชููุนุฉ ููุตุญ ูุงูุฎุทุฃ
correct_responses = ["ุตุญ ุนููู ูุง ูุญุด ๐", "ูุจุฏุน ูุงููู ๐", "ููู ุงูุดุบู ููุง ุจูุงุด ๐", "ุฃููู ููู ูุจูู! ๐"]
wrong_responses = ["ูุฎุฑุจ ุจูุช ุงูุฐูุงุก ๐", "ุบูุท ูุง ูุนูู ๐", "ุถุฑุจุช ุฌูุจ ๐", "ูู ููููู ุงูุฌูุงุจ ๐"]

# ุงูุจูุงูุงุช
questions = {
    "ุฃูุบุงุฒ": [
        {"q": "ุดูุก ููุดู ุจุฏูู ุฃุฑุฌูุ", "a": "ุงูุณุงุนุฉ", "choices": ["ุงูุณูุงุฑุฉ", "ุงูุณุงุนุฉ", "ุงูููุงุก"]},
        {"q": "ุดูุก ุฅุฐุง ููุณุชู ุตุฑุฎุ", "a": "ุงูุฌุฑุณ", "choices": ["ุงููุท", "ุงูุฌุฑุณ", "ุงููุงุชู"]},
        {"q": "ุดู ุจูุฌู ุจุงูููู ููุง ูุฌู ุจุงูููุงุฑุ", "a": "ุงูุธูุงู", "choices": ["ุงูููุฑ", "ุงูุธูุงู", "ุงูููุจู"]}
    ],
    "ุฏูููุฉ": [
        {"q": "ูู ุนุฏุฏ ุฃุฑูุงู ุงูุฅุณูุงูุ", "a": "5", "choices": ["5", "4", "6"]},
        {"q": "ูุง ุฃูู ุณูุฑุฉ ุจุงููุฑุขูุ", "a": "ุงููุงุชุญุฉ", "choices": ["ุงููุณุงุก", "ุงูุจูุฑุฉ", "ุงููุงุชุญุฉ"]},
        {"q": "ูุง ุงุณู ูุจู ุงุจุชูุนู ุงูุญูุชุ", "a": "ูููุณ", "choices": ["ููุณู", "ููุญ", "ูููุณ"]}
    ],
    "ุฌุบุฑุงููุง": [
        {"q": "ุนุงุตูุฉ ุงููุงุจุงูุ", "a": "ุทูููู", "choices": ["ุทูููู", "ุจููู", "ุณูู"]},
        {"q": "ุฃุทูู ููุฑ ุจุงูุนุงููุ", "a": "ุงูููู", "choices": ["ุงูุฃูุงุฒูู", "ุงูุฏุงููุจ", "ุงูููู"]},
        {"q": "ุฃูู ุชูุน ุฌุจุงู ุงูุฃูุฏูุฒุ", "a": "ุฃูุฑููุง ุงูุฌููุจูุฉ", "choices": ["ุขุณูุง", "ุฃูุฑูุจุง", "ุฃูุฑููุง ุงูุฌููุจูุฉ"]}
    ],
    "ุชุงุฑูุฎ": [
        {"q": "ูู ุญุฑุฑ ุงููุฏุณุ", "a": "ุตูุงุญ ุงูุฏูู", "choices": ["ุตูุงุญ ุงูุฏูู", "ูููุงูู", "ูุงุจูููู"]},
        {"q": "ูู ุณูุฉ ุงุณุชูุฑุช ุงูุญุฑุจ ุงูุนุงูููุฉ ุงูุซุงููุฉุ", "a": "6", "choices": ["4", "6", "10"]},
        {"q": "ูู ุฃู ุนุงู ุณูุทุช ุจุบุฏุงุฏ ุนูู ูุฏ ุงููุบููุ", "a": "1258", "choices": ["1517", "1258", "1917"]}
    ],
    "ุฑูุงุถุฉ": [
        {"q": "ูู ูุงุนุจ ูู ูุฑูู ูุฑุฉ ุงููุฏูุ", "a": "11", "choices": ["9", "11", "10"]},
        {"q": "ูู ูุงุฒ ุจูุฃุณ ุงูุนุงูู 2018ุ", "a": "ูุฑูุณุง", "choices": ["ูุฑูุณุง", "ุงูุฃุฑุฌูุชูู", "ุฃููุงููุง"]},
        {"q": "ุนุฏุฏ ุฃุดูุงุท ูุฑุฉ ุงูุณูุฉุ", "a": "4", "choices": ["2", "4", "3"]}
    ]
}

user_data = {}

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("ุฃุณุฆูุฉ ุฏูููุฉ", "ุฃูุบุงุฒ", "ุฃุณุฆูุฉ ุนุงูุฉ")
    bot.send_message(message.chat.id, "ุงุฎุชุงุฑ ููุน ุงูุฃุณุฆูุฉ ููู ุจุฏู ุชุฌุฑุจ ุญุธู ูููุง:", reply_markup=markup)
    user_data[message.chat.id] = {"score": 0, "q_index": 0, "category": None}

@bot.message_handler(func=lambda m: m.text in ["ุฃุณุฆูุฉ ุฏูููุฉ", "ุฃูุบุงุฒ", "ุฃุณุฆูุฉ ุนุงูุฉ"])
def choose_category(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.text == "ุฃุณุฆูุฉ ุนุงูุฉ":
        markup.add("ุฌุบุฑุงููุง", "ุชุงุฑูุฎ", "ุฑูุงุถุฉ", "ุฑุฌูุน ูููุงุฆูุฉ")
        bot.send_message(message.chat.id, "ุงุฎุชุงุฑ ููุน ุงูุฃุณุฆูุฉ ุงูุนุงูุฉ:", reply_markup=markup)
    else:
        user_data[message.chat.id] = {"score": 0, "q_index": 0, "category": message.text}
        send_question(message.chat.id)

@bot.message_handler(func=lambda m: m.text in ["ุฌุบุฑุงููุง", "ุชุงุฑูุฎ", "ุฑูุงุถุฉ"])
def general_sub_category(message):
    user_data[message.chat.id] = {"score": 0, "q_index": 0, "category": message.text}
    send_question(message.chat.id)

def send_question(chat_id):
    data = user_data[chat_id]
    cat = data["category"]
    index = data["q_index"]
    if index < len(questions[cat]):
        q = questions[cat][index]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for choice in q["choices"]:
            markup.add(choice)
        bot.send_message(chat_id, f"ุณุคุงู {index + 1}: {q['q']}", reply_markup=markup)
    else:
        score = data["score"]
        msg = f"ูุชูุฌุชู: {score} ูู 3\n"
        if score == 0:
            msg += "ูุดู ุฐุฑูุน ๐ ุฌุฑุจ ุดู ุฃุณูู"
        elif score == 1:
            msg += "ุฃูุงุงุงุ ุจุชุญุงูู ูุนูู ๐"
        elif score == 2:
            msg += "ูุฑูุจ ูู ุงูููุชุงุฒ ๐"
        else:
            msg += "ุฃุณุทูุฑุฉ ุฒูุงูู ูุง ุบุงูู ๐"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("ุฑุฌูุน ูููุงุฆูุฉ")
        bot.send_message(chat_id, msg, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "ุฑุฌูุน ูููุงุฆูุฉ")
def back_to_menu(message):
    start(message)

@bot.message_handler(func=lambda m: True)
def answer_question(message):
    if message.chat.id not in user_data or not user_data[message.chat.id]["category"]:
        bot.send_message(message.chat.id, "ุจููุด ุฃูู ุดู ูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ ูุงุฎุชุงุฑ ููุน ุงูุฃุณุฆูุฉ.")
        return
    data = user_data[message.chat.id]
    cat = data["category"]
    index = data["q_index"]
    if index < len(questions[cat]):
        correct = questions[cat][index]["a"]
        if message.text == correct:
            data["score"] += 1
            bot.send_message(message.chat.id, random.choice(correct_responses))
        else:
            bot.send_message(message.chat.id, random.choice(wrong_responses))
        data["q_index"] += 1
        send_question(message.chat.id)

print("ุงูุจูุช ุดุบูุงู... ุงุณุชูุงู ูุดุชุบู")
bot.polling()
